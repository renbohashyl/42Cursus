version: '3.8'

services:
  database:
    container_name: database
    restart: on-failure
    build:
      context: ./database
      dockerfile: ./Dockerfile
    expose:
      - 5432
    volumes:
      - ./${DATA_PATH}/${DB_NAME}:${PGDIR}
    networks:
      - intra
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "/usr/lib/postgresql/${PGVER}/bin/pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    container_name: backend
    restart: on-failure
    build:
      context: ./backend/
      dockerfile: ./Dockerfile
    ports:
      - "3000:3000"
    networks:
      - intra
    volumes:
      - ./${DATA_PATH}/${SERVER_NAME}:${SRCDIR}
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthcheck"]
      interval: 35s
      timeout: 10s
      retries: 10

  frontend:
    container_name: frontend
    restart: on-failure
    build:
      context: ./frontend/  
      dockerfile: ./Dockerfile
    networks:
      - intra
    ports:
      - "4000:4000"
    volumes:
      - ./${DATA_PATH}/${WEB_NAME}:${SRCDIR}
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000"]
      interval: 60s
      timeout: 10s
      retries: 5

networks:
  intra:
    driver: bridge

#volumes:
#  db-data:
#    driver: local
#    driver_opts:
#      type: none
#      o: bind
#      device: ${PWD}/${DATA_PATH}/${DB_NAME}
#  server-data:
#    driver: local
#    driver_opts:
#      type: none
#      o: bind
#      device: ${PWD}/${DATA_PATH}/${SERVER_NAME}
#  web-data:
#    driver: local
#    driver_opts:
#      type: none
#      o: bind
#      device: ${PWD}/${DATA_PATH}/${WEB_NAME}
